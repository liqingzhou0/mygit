#define    EXIT_SUCCESS    0
#define    EXIT_FAILURE    1

exit(EXIT_SUCCESS);
exit(EXIT_FAILURE);


exit()通常是用在子程序中用来终结程序用的，使用后程序自动结束，跳回操作系统。

在c语言中： exit(0)：表示正常退出; exit(1):表示异常退出，这个1是返回给操作系统;
值是返回操作系统的：0是正常退出，而其他值都是异常退出，所以我们在设计程序时，可以在推出前给一些小的提示信息，或者在调试程序的过程中查看出错原因。

扩展资料：

进程函数：所在函数库为stdlib.h、process.h

void abort() 此函数通过调用具有出口代码3的_exit写一个终止信息于stderr，并异常终止程序 无返回值。

void _exit(int status)终止当前程序,但不清理现场。

void exit(int status) 终止当前程序,关闭所有文件,写缓冲区的输出(等待输出),并调用任何寄存器的"出口函数",无返回值。

exit() 是电脑函数
exit()通常是用在子程序中用来终结程序用的，使用后程序自动结束，跳回操作系统。
exit(0) 表示程序正常退出,exit⑴/exit(-1）表示程序异常退出。
exit() 结束当前进程/当前程序/，在整个程序中，只要调用 exit ，就结束。

函数名: exit()
所在头文件：stdlib.h(如果是”VC6.0“的话头文件为：windows.h)
功 能: 关闭所有文件，终止正在执行的进程。
exit(0)表示正常退出，
exit(x)（x不为0）都表示异常退出，这个x是返回给操作系统（包括UNIX,Linux,和MS DOS）的，以供其他程序使用。
stdlib.h: void exit(int status);//参 数status，程序退出的返回值


exit()和return的区别：
按照ANSI C，在最初调用的main()中使用return和exit()的效果相同。
但要注意这里所说的是“最初调用”。如果main()在一个递归程序中，exit()仍然会终止程序；但return将
控制权移交给递归的前一级，直到最初的那一级，此时return才会终止程序。return和exit()的另一个区别
在于，即使在除main()之外的函数中调用exit()，它也将终止程序。
_exit()与exit的区别：
头文件：
exit:#include<stdlib.h>
_exit:#include<unistd.h>
_exit()函数:直接使进程停止运行,清除其使用的内存空间,并销毁其在内核中的各种数据结构;
exit()函数则在这些基础上作了一些包装,在执行退出之前加了若干道工序。
exit()函数与_exit()函数最大的区别就在于 exit()函数在调用 exit 系统调用之前要检查文件的打开情况,把文件缓冲区中的内容写回文件。
man 3 exit
The C [1]  standard specifies two constants, EXIT_SUCCESS and EXIT_FAILURE, that may be passed to exit() to indicate
successful or unsuccessful termination, respectively.
注：exit()就是退出，传入的参数是程序退出时的状态码，0表示正常退出，其他表示非正常退出，一般都用-1或者1，标准C里有EXIT_SUCCESS和EXIT_FAILURE两个宏，用exit(EXIT_SUCCESS);
退出过程编辑

1.调用atexit()注册的函数（出口函数）；按ATEXIT注册时相反的顺序调用所有由它注册的函数,这使得我们可以指定在程序终止时执行自己的清理动作.例如,保存程序状态信息于某个文件,解开对共享数据库上的锁等.
2.cleanup()；关闭所有打开的流，这将导致写所有被缓冲的输出，删除用TMPFILE函数建立的所有临时文件.
3.最后调用_exit()函数终止进程。
_exit做3件事（man）：
1，Any open file descriptors belonging to the process are closed
2，any children of the process are inherited by process 1, init
3，the process's parent is sent a SIGCHLD signal
exit执行完清理工作后就调用_exit来终止进程。